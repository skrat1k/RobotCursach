// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/robots/create": {
            "post": {
                "description": "Create a new robot with name and coordinates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "robots"
                ],
                "summary": "Create new robot",
                "parameters": [
                    {
                        "description": "Robot info",
                        "name": "robot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateRobotDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Robot ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/robots/delete/{id}": {
            "delete": {
                "description": "Delete robot by ID",
                "tags": [
                    "robots"
                ],
                "summary": "Delete robot",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Robot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete robot",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/robots/updatecord": {
            "put": {
                "description": "Update x/y coordinates of a robot",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "robots"
                ],
                "summary": "Update robot coordinates",
                "parameters": [
                    {
                        "description": "Updated coordinates",
                        "name": "robot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRobotCordDTO"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update robot cords",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/robots/updatename": {
            "put": {
                "description": "Update robot name by ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "robots"
                ],
                "summary": "Update robot name",
                "parameters": [
                    {
                        "description": "Updated name",
                        "name": "robot",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRobotNameDTO"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update robot name",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/robots/{id}": {
            "get": {
                "description": "Get detailed robot info by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "robots"
                ],
                "summary": "Get robot info",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Robot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Robot"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateRobotDTO": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "xCord": {
                    "type": "integer"
                },
                "yCord": {
                    "type": "integer"
                },
                "zCord": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateRobotCordDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "xCord": {
                    "type": "integer"
                },
                "yCord": {
                    "type": "integer"
                },
                "zCord": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateRobotNameDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.Robot": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "xCord": {
                    "type": "integer"
                },
                "yCord": {
                    "type": "integer"
                },
                "zCord": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8083",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "RobotService API",
	Description:      "API for managing robots in the RobotService system.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
